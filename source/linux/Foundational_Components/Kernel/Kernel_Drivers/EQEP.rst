EQEP
----

.. rubric:: Introduction
   :name: introduction-linux-eqep

Linux has support for EQEP (Enhanced Quadature Encoder Pulse).
EQEP channels can be used to interface with rotary encoder hardware.

.. ifconfig:: CONFIG_part_variant in ('AM62X', 'AM62AX')

   - AM62x SK: EQEP0: k3-am62x-sk-eqep.dtso

.. ifconfig:: CONFIG_part_variant in ('AM64X')

   - AM64x SK: EQEP0: k3-am642-sk.dts

.. ifconfig:: CONFIG_part_variant in ('AM62PX')

   - AM62p SK: EQEP0: k3-am62p5-sk-eqep.dtso

.. rubric:: Kernel Configuration
   :name: driver-configuration-eqep

Using menuconfig, enable the following driver:

.. code-block:: menuconfig

   Device Drivers --->
      <M> Counter support  --->
         <M> TI eQEP counter driver

.. note::

   EQEP driver should be enabled by default as a kernel module in TI Linux kernel.

.. rubric:: Features supported in TI SDK
   :name: features-supported-eqep

- position
- overflow/underflow events
- direction
- unit timer
- latched position
- edge capture

.. rubric:: Using eQEP with SYSFS interface
   :name: sysfs-interface-eqep

To check if eQEP is enabled with sysfs interface, check for the existance of the
following directory: :file:`/sys/bus/counter` and run the following command to find the
name of counter:

.. code-block:: console

   root@am62xx-evm:~# cd /sys/bus/counter/devices
   root@am62xx-evm:/sys/bus/counter/devices# cat counter0/name
   23200000.counter
   root@am62xx-evm:/sys/bus/counter/devices#

The counter name shows this is eQEP0 at base adress 23200000.

Several sysfs attributes are generated by the Generic Counter interface, and reside under
the :file:`/sys/bus/counter/devices/counterX` directory, where X is to the respective counter
device id.

Please see the counter sysfs documentation `upstream <https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-bus-counter>`__
or in TI Linux kernel :file:`/Documentation/ABI/testing/sysfs-bus-counter` for detailed information on each
generic counter interface sysfs attribute.

Through these sysfs attributes, programs and scripts may interact with the Generic Counter paradigm
Counts, Signals, and Synapses of respective counter devices.

The following sysfs atributes can be found in :file:`/sys/bus/counter/devices/counterX` in TI SDK:

- countY/ceiling
- countY/count
- countY/direction
- countY/enable
- countY/function
- countY/latched_count
- countY/signal0_action
- countY/signal1_action
- edge_capture_unit_enable
- edge_capture_unit_latched_period
- edge_capture_unit_max_period
- edge_capture_unit_prescaler
- latch_mode
- unit_timer_enable
- unit_timer_period
- unit_timer_time

.. rubric:: Character device nodes
   :name: character-device-nodes-eqep

Counter character device nodes are created under the /dev directory as counterX, where X is the respective counter device id.

.. code-block:: console

   $ ls /dev/counter*
   /dev/counter0

.. rubric:: Counter Events
   :name: counter-events

Please read the generic counter API `upstream <https://docs.kernel.org/driver-api/generic-counter.html>`__ or in
TI Linux kernel :file:`/Documentation/driver-api/generic-counter.rst` documentation to implement events:

.. rubric:: Test eQEP on AM62x SK
   :name: test-eqep-am62x

+------------------------------------------+---------------------------------------------------------+
| .. Image:: /images/am62x_sk_eqep.jpg     | .. Image:: /images/am62x_sk_rotary_encoder_breakout.jpg |
|       :width: 380px                      |       :width: 380px                                     |
|       :align: center                     |       :align: center                                    |
+------------------------------------------+---------------------------------------------------------+
| AM62x SK & rotary encoder breakout board | Example Diligent rotary encoder breakout board          |
+------------------------------------------+---------------------------------------------------------+

The example rotary encoder breakout board used in this example can be found `here <https://www.digikey.com/en/products/detail/digilent,-inc./410-117/4090075?>`__.

The following is an example for testing eQEP using sysfs interface:

.. code-block:: console

   root@am62xx-evm:~# echo 0xff > /sys/bus/counter/devices/counter0/count0/ceiling
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/ceiling
   255
   root@am62xx-evm:~# echo 1 > /sys/bus/counter/devices/counter0/count0/enable
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   0
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   92
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   148
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   188
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   252
   root@am62xx-evm:~# cat /sys/bus/counter/devices/counter0/count0/count
   12

Notice in this example that turning the rotary shaft encoder counterclockwise increases the count
until reaching the ceiling, then wraps around to zero and starts again. Also, turning the rotary
shaft encoder clockwise decreases the count.
