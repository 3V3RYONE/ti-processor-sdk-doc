.. http://processors.wiki.ti.com/index.php/Processor_SDK_LINUX_PTP_BC

.. rubric:: Overview
   :name: overview

The purpose of this page is to provide an overview of Boundary Clock
(here after, referred to as BC), the internal mechanism of how BC works
on TI's AM57x processors, required software and hardware, test setup and
procedure, and our results. Please note that majority of the BC
functionality is implemented in Processor SDK Linux 4.2 release,
available
`here <http://software-dl.ti.com/processor-sdk-linux-rt/esd/AM57X/04_02_00_09/index_FDS.html>`__.
There are minor updates required to linuxptp binaries to complete the BC
functionality, and the details are furnished below. These patches will
be integrated into Processor SDK 4.3 release, and at that time, this
document will also be integrated into the rest of Linux PTP
documentation available
`here <http://processors.wiki.ti.com/index.php/Processor_SDK_LINUX_PTP>`__.

.. rubric:: PTP Boundary Clock (AM57xx)
   :name: ptp-boundary-clock-am57xx

.. rubric:: Overview
   :name: overview-1

PTP boundary clock (BC) is supported on AM571x and AM572x IDKs. In the
case of AM571x IDK, BC with two or three ports is supported. These two
or three ports can be any combination of the three ports, i.e., GMAC
port, one ICSS1 PRU port and one ICSS2 PRU port. In the case of AM572x
IDK, BC with two ports, i.e., GMAC port and one ICSS2 PRU port, is
supported.

.. rubric:: Software Architecture
   :name: software-architecture

There are four main components to the software together to provide the
boundary clock functionality. These are, from low to high level, the
ICSS PRU firmware, the related kernel ethernet drivers, the linuxptp
ptp4l application and the linuxptp phc2sys application.

.. rubric:: ICSS PRU Firmware
   :name: icss-pru-firmware

The ICSS PRU firmware used in BC is the PRP firmware (with PTP
timestamping capability enabled) configured to run in Single Attached
Node (SAN) mode.

.. rubric:: CPSW/CPTS Ethernet Driver
   :name: cpswcpts-ethernet-driver

This is the same CPSW/CPTS Ethernet driver implemented for GMAC PTP OC.

.. rubric:: ICSS-PRU/IEP Ethernet Driver
   :name: icss-pruiep-ethernet-driver

This is the same ICSS PRU Ethernet driver implemented for PTP OC.

.. rubric:: BC Internal Clock Sync Monitoring Driver
   :name: bc-internal-clock-sync-monitoring-driver

A thin PTP BC driver layer is added on top of the ICSS-PRU/IEP and
CPSW/CPTS Ethernet drivers in order to support the BC internal clock
synchronization. This thin layer of driver is responsible for keeping
track of which internal clock has its PPS enabled and giving permission
to the requests by the internal clocks to generate PPS. Keeping track of
PPS enablement is necessary because, at any instance of time, at most
one clock can enable its PPS. For otherwise the SoC may be permanently
damaged.

.. rubric:: Application linuxptp ptp4l
   :name: application-linuxptp-ptp4l

This is the application provides the BC PTP functionality. In the AM57xx
BC, the linuxptp ptp4l program is configured to run in jbod (just a
bunch of device) mode, i.e., the BC PTP clock is modelled on more than
one internal clocks instead of one single clock.

.. rubric:: Application linuxptp phc2sys
   :name: application-linuxptp-phc2sys

The linuxptp phc2sys is used to perform synchronization of the internal
clocks of a BC in jbod mode. For AM57xx BC, the phc2sys is enhanced to
support the synchronization of the BC internal clocks by reading the
timestamps of the PPS generated by the internal master clock and
captured by the internal slave clocks. phc2sys then feeds the timestamps
into linuxptp's servo algorithm. The algorithm then produces the needed
clock adjustment, usually in ppb of the nominal clock frequency, which
is then passed to the kernel driver for clock adjustment by calling
Linux PTP subsystem's standard API.

.. rubric:: Internal Clock Synchronization
   :name: internal-clock-synchronization

Although the PTP clock time in the PTP network of the BC appears coming
from one clock source, the PTP clock time available on the AM57xx
ethernet ports are actually generated by different clocks internally. In
particular, the PTP clock time on the CPSW GMAC port is generated by the
CPTS module, and the PTP clock time on the ICSS PRU ports is generated
by the corresponding IEP module on the respective ICSS. Since these
clocks are running on their own separately, thus some internal
synchronization mechanism is needed in order to make the AM57xx BC
internal clocks appear as one clock source in the PTP network.

The internal clock synchronization can be considered in two parts. The
first part is the alignment of the clock time up to within one second.
This can easily be done by just reading one internal clock's time and
write it to the other internal clock by application software alone under
the assumption that the whole read and write operation takes less than
one second. The other part of synchronization is to align the two
clocks' time to the second boundary.

In this AM57xx BC implementation, the alignment of two internal clocks'
time to the second boundary is done by using the PPS generated by one
internal (master) clock latched into another internal (slave) clock.
This means that the PPS received by an internal clock is timestamped.
This timestamp is then consumed by a servo application in the
calculation of the adjustment needed in order to align the internal
slave clock's second boundary to that of the internal master clock.

Here the internal master clock of the BC is the internal clock that is
synchronized to a PTP master clock over the PTP network, i.e., the
corresponding ethernet port is in PTP slave port state.

.. rubric:: Required hardware and software to setup BC
   :name: required-hardware-and-software-to-setup-bc

.. rubric:: Hardware Modifications for AM57xx IDK BC
   :name: hardware-modifications-for-am57xx-idk-bc

For AM57xx IDK BC, since PPC generated by one internal clock needs to be
latched into another internal clock, hardware, mainly blue wire,
modifications are needed in order to achieive the latching of the PPS
generated by one internal clock into another internal clock.

.. rubric:: AM571x
   :name: am571x

See the `AM571x Mod
List <http://processors.wiki.ti.com/images/6/66/Am571x_idk_bc_ModList.pdf>`__
for more details of the hardware modification specification.

.. rubric:: AM572x
   :name: am572x

See the `AM572x Mod
List <http://processors.wiki.ti.com/images/c/c3/Am572x_idk_bc_ModList.pdf>`__
for more details of the hardware modification specification.

.. rubric:: Software
   :name: software

Majority of BC functionality is available in Processor SDK 4.2 release.
On top of 4.2 release, the following patches, updated applications and
application configuration files are required. These patches and
applications are included in this `zip
file <http://processors.wiki.ti.com/images/5/51/Bc_patches.zip>`__.

.. rubric:: phc2sys
   :name: phc2sys

**What's New:**

Added support of BC internal clock sync by using PPS.

**What to do:**

Replace the release version found in target filesystem directory

::

    /usr/bin

by this updated version included in zip file.

.. rubric:: ptp4l
   :name: ptp4l

**What's New:**

Fixes error in peer master port configuration required by PRU firmware.

**What to do:**

Replace the release version found in target filesystem directory

::

    /usr/bin

by this updated version included in zip file.

.. rubric:: cpts patch
   :name: cpts-patch

**What's New:**

Fixes error in not include timestamp read function call inside spin
lock.

**What to do:**

Apply kernel patch
0001-net-ethernet-ti-cpts-add-cpts\_fifo\_read-within-spin\_.patch
included in zip file.

.. rubric:: prueth patch
   :name: prueth-patch

**What's New:**

Fixes error in causing kernel crash when performing ifconfig down.

**What to do:**

Apply kernel patch
0001-prueth-fix-the-kernel-crash-when-eth-interface-is-br.patch included
in zip file.

.. rubric:: bc.cfg
   :name: bc.cfg

**What is it:**

Sample ptp4l BC configuration file for AM571x IDK.

**What to do:**

Put this file in target filesystem directory

::

    /home/root/

For AM572x IDK, interface eth4 needs to be removed.

.. rubric:: oc2.cfg
   :name: oc2.cfg

**What is it:**

Sample ptp4l OC on interface eth2 configuration file.

**What to do:**

If needed for starting an OC on interface eth2, put this file in target
filesystem directory

::

    /home/root/

.. rubric:: Test Setup/Procedure
   :name: test-setupprocedure

.. rubric:: A Sample BC Setup
   :name: a-sample-bc-setup

A sample set up for testing purpose is shown below.

.. Image:: ../images/Bc_connect.jpg

| 
| In this scenario, the BC ICSS2 PRU port (interface eth2) is in PTP
  slave state (ICSS2-IEP is the BC internal master clock). The other two
  ports, BC ICSS1 (interface eth4) and BC CPSW/CPTS (interface eth1) are
  in PTP master state (ICSS1-IEP and CPTS are the BC internal slave
  clocks).

.. rubric:: Getting a PTP master clock ready
   :name: getting-a-ptp-master-clock-ready

Start a reference PTP master clock that is connected in the PTP network
as shown in the `sample setup <#A_Sample_BC_Setup>`__.

If the PTP master clock is an AM572x OC running linuxptp ptp4l, and for
testing purpose, a line such as

::

    clockClass 6

in the [global] section of the OC's linuxptp configuration file can be
helpful to make sure that the OC will be a master clock. Refer to `PTP
Ordinary
Clock <http://processors.wiki.ti.com/index.php/Processor_SDK_LINUX_PTP#PTP_Ordinary_Clock>`__
for starting an AM57xx OC.

| 

.. rubric:: Preparation on the AM57xx BC IDK
   :name: preparation-on-the-am57xx-bc-idk

This section assumes that an AM571x is used. It should be similar for
AM572x except that information about ICSS1 PRU (PRUSS1), eth4 and eth5
are not applicable.

.. rubric:: Hardware
   :name: hardware

.. rubric:: AM571x
   :name: am571x-1

Connect the following 6 pins together. See the `AM571x Mod
List <http://processors.wiki.ti.com/images/6/66/Am571x_idk_bc_ModList.pdf>`__
for more details.

-  timer16: C23 XREF CLK3
-  timer15: AC10 (input): USB2\_DRVVBUS (USB2\_VBUS\_EN)
-  pr1\_edc\_sync0\_out
-  pr1\_edc\_latch0\_out
-  pr2\_edc\_sync0\_out
-  pr2\_edc\_latch0\_out

Example: See below pictures (J21 is connector along top edge)

+--------------------------------------+--------------------------------------+
| Wire on AM571x IDK                   | signal                               |
+======================================+======================================+
| lower left yellow (above board)      | .. raw:: html                        |
|                                      |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | timer15                              |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+
| top right yellow (coming out from    | .. raw:: html                        |
| underneath)                          |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | timer16 CLK3 out                     |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+
| J21-18 left green                    | .. raw:: html                        |
|                                      |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | pr2\_edc\_latch0\_out                |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+
| J21-20 right green                   | .. raw:: html                        |
|                                      |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | pr1\_edc\_latch0\_out                |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+
| J21-54 left red                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | pr1\_edc\_sync0\_out                 |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+
| J21-56 right red                     | .. raw:: html                        |
|                                      |                                      |
|                                      |    <div style="text-align: center;"> |
|                                      |                                      |
|                                      | pr2\_edc\_sync0\_out                 |
|                                      |                                      |
|                                      | .. raw:: html                        |
|                                      |                                      |
|                                      |    </div>                            |
+--------------------------------------+--------------------------------------+

.. Image:: ../images/Am571x_whole_small2.jpg

and this more J21 focused of the same picture above

.. Image:: ../images/Am571x_j21.jpg

.. rubric:: AM572x
   :name: am572x-1

Connect the following 4 pins together. See the `AM572x Mod
List <http://processors.wiki.ti.com/images/c/c3/Am572x_idk_bc_ModList.pdf>`__
for more details.

-  timer16: C23 XREF CLK3
-  timer15: AC10 (input): USB2\_DRVVBUS (USB2\_VBUS\_EN)
-  pr2\_edc\_sync0\_out
-  pr2\_edc\_latch0\_out

.. rubric:: Software
   :name: software-1

See a complete sample log for AM571x BC log
`here <http://processors.wiki.ti.com/images/2/20/Bc_20180112.pdf>`__. As
is shown in the log, right after the root login, the content of some
shell scripts are displayed. Some of the scrits are for retrieving
system information while others are for performing configurations. These
sample scripts are for informational purpose only.

Since BC and OC are supported by using the PRP firmware configured to
run in SAN mode, make sure to boot up the kernel with the parameters

-  ti\_prueth.pruss1\_ethtype=2
-  ti\_prueth.pruss2\_ethtype=2

in the bootargs. The firmware

-  am57xx-pru0-pruprp-fw.elf
-  am57xx-pru1-pruprp-fw.elf

will be loaded.

Make sure the following two lines appear in the start up log:

::

    prueth pruss2_eth: TI PRU ethernet (type 2) driver initialized
    prueth pruss1_eth: TI PRU ethernet (type 2) driver initialized

Once the AM57xx IDK is boot into kernel prompt, use command, for
example,

::

    $ ls /sys/devices/platform/pruss1_eth/net
      eth4/  eth5/

to see which interface is available on which ICSS. For GMAC port, use
the command

::

    $ ls /sys/devices/platform/44000000.ocp/48484000.ethernet/net
      eth0/ eth1/

Then enable SAN mode on each of the ICSS PRU interfaces (assuming eth2
and eth3 are on ICSS2, eth4 and eth5 are on ICSS1):

::

    $ echo 1 > /sys/kernel/debug/prueth-eth2/prp_emac_mode
    $ echo 1 > /sys/kernel/debug/prueth-eth3/prp_emac_mode
    $ echo 1 > /sys/kernel/debug/prueth-eth4/prp_emac_mode
    $ echo 1 > /sys/kernel/debug/prueth-eth5/prp_emac_mode

Next, configure each BC interface with a proper IP address. For example,

::

    $ ifconfig eth1 192.168.1.1

::

    $ ifconfig eth2 192.168.2.1

::

    $ ifconfig eth4 192.168.4.1

.. rubric:: Starting the BC applications
   :name: starting-the-bc-applications

Make sure the linuxptp BC configuration file bc.cfg (included in zip
file)

::

    [global]
    tx_timestamp_timeout 10
    logMinPdelayReqInterval -3
    logSyncInterval -3
    twoStepFlag 1
    summary_interval 0
    [eth1]
    boundary_clock_jbod 1
    egressLatency 146
    ingressLatency 346
    [eth2]
    boundary_clock_jbod 1
    egressLatency 726
    ingressLatency 186
    [eth4]
    boundary_clock_jbod 1
    egressLatency 726
    ingressLatency 186

is available in the filesystem. Start ptp4l in the background and with
display log to stdout enabled:

::

    $ ptp4l -2 -P -f bc.cfg -m &

Wait to see the PTP slave port clock is sync and stabilized, for
example, seeing similar lines:

::

    ptp4l[304.713]: rms    7 max   12 ( -12,    1) freq  -8253 +/-   4 delay     7 +/-   1
    ptp4l[305.714]: rms    2 max    4 (  -4,    2) freq  -8248 +/-   3 delay     8 +/-   0
    ptp4l[306.714]: rms    2 max    3 (  -3,    3) freq  -8248 +/-   3 delay     8 +/-   0

then start phc2sys to perform the BC internal clock sync in the
background

::

    $ phc2sys -a -X -g eth1 -m &

where the new options added in this implementation are

::

    -X: use extts (pps) to perform BC internal clock synchronization.
    -g: specify which interface is the GMAC port interface

Lines similar to the following should be displayed after a few seconds
(mixed with the "ptp4l[304.713]: rms ..." lines from ptp4l) :

::

    phc2sys[373.480]: eth4 phc offset       -14 s2 freq   -8311
    phc2sys[373.500]: eth1 phc offset       -18 s2 freq   -8315

Start an AM57xx OC in slave only mode connected to a BC's master port,
for example, the AM572x OC-3 in the `sample
setup <#A_Sample_BC_Setup>`__. To make sure the OC is started in slave
only mode, the ptp4l command

::

    $ ptp4l -2 -P -f oc.cfg -s -m

can be used. The slave OC's PPS can then be measured against the
reference PTP master clock's PPS.

.. rubric:: Forcing BC Port State Change (for Testing Purpose)
   :name: forcing-bc-port-state-change-for-testing-purpose

To force a port state change on the BC ports for testing purpose, one
can bring down the current reference PTP master clock and bring up
another reference PTP master clock connected to, for example, the BC's
eth1 interface in the `sample setup <#A_Sample_BC_Setup>`__. Or simply
rearrange the cable connections in the `sample
setup <#A_Sample_BC_Setup>`__ as shown below.

.. Image:: ../images/Bc_reconnect.jpg

See
`here <http://processors.wiki.ti.com/images/8/83/Bc_reconnect_20180112.pdf>`__
for a sample log when the BC's cables are reconnected. The sample log
starts right before when the cable is disconnected from eth2 on BC's
ICSS2 in the `sample setup <#A_Sample_BC_Setup>`__.

.. rubric:: Test Results
   :name: test-results

.. rubric:: BC (GMAC ICSS2)
   :name: bc-gmac-icss2

| Oregano <==> BC-GMAC-eth1 <==> BC-ICSS2-eth2 <==> OC-ICSS2-eth2

.. Image:: ../images/Pic_ptp_bc_eth1_eth2.png

| 

.. rubric:: BC (GMAC ICSS1)
   :name: bc-gmac-icss1

| Oregano <==> BC-GMAC-eth1 <==> BC-ICSS1-eth4 <==> OC-ICSS2-eth2

.. Image:: ../images/Pic_ptp_bc_eth1_eth4.png

.. rubric:: BC (ICSS2 GMAC)
   :name: bc-icss2-gmac

| Oregano <==> BC-ICSS2-eth2 <==> BC-GMAC-eth1 <==> OC-GMAC-eth1

.. Image:: ../images/Pic_ptp_bc_eth2_eth1.png

.. rubric:: BC (ICSS1 GMAC)
   :name: bc-icss1-gmac

| Oregano <==> BC-ICSS1-eth4 <==> BC-GMAC-eth1 <==> OC-GMAC-eth1

.. Image:: ../images/Pic_ptp_bc_eth4_eth1.png

.. rubric:: BC (ICSS2 ICSS1)
   :name: bc-icss2-icss1

| Oregano <==> BC-ICSS2-eth2 <==> BC-ICSS1-eth4 <==> OC-ICSS2-eth2

.. Image:: ../images/Pic_ptp_bc_eth2_eth4.png

.. rubric:: BC (ICSS1 ICSS2)
   :name: bc-icss1-icss2

| Oregano <==> BC-ICSS1-eth4 <==> BC-ICSS2-eth2 <==> OC-ICSS2-eth2

.. Image:: ../images/Pic_ptp_bc_eth4_eth2.png

.. rubric:: Limitations
   :name: limitations

-  At most one port from each of the three modules, CPSW, ICSS1 and
   ICSS2, can be as a BC interface.

-  In the current implementation, when running more than one OC, for
   example, ICSS1 OC and ICSS2 OC, only one pps can be enabled through
   command line. In this example, if ptp1 is the device for ICSS2 OC and
   ptp2 is the device for ICSS1 OC, then only one of the following will
   be allowed:

::

    echo 1 > /sys/devices/platform/pruss2_eth/ptp/ptp1/pps_enable

or

::

    echo 1 > /sys/devices/platform/pruss1_eth/ptp/ptp2/pps_enable

The same is true for other combinations. The intention is to avoid
having more than one PPS enabled when the IDK has the HW mod mentioned
in `Hardware Modifications for AM57xx IDK
BC <#Hardware_Modifications_for_AM57xx_IDK_BC>`__ and the pins are tied
together.

.. rubric:: Known Issues
   :name: known-issues

-  JIRA PLSK-1771: Intermittent Linux crash is observed on PRU ports in
   PTP tests

