#!/bin/sh

## Force-route all output generated by this script to the console
exec > /dev/console 2>&1

echo "************************************************************"
echo "Sitara Flash Fetcher Script v3.1 - 05/04/2020"
echo "This version is aligned with PROCESSOR-SDK-LINUX-AM335X v6.3"
echo "************************************************************"

## If eth0 does not have an IP address, attempt to bring up 
## up the USB interface. CPSW Ethernet is automatically brought up
## by init scripts in the Flasher file system, and should
## have obtained an IP address by DHCP or been assigned one
## statically.
MAC_DT="/proc/device-tree/ocp/ethernet@4a100000/slave@4a100200"                 
MAC_ADDR=$(hexdump -e '1/1 "%02X" 5/1 ":%02X"' ${MAC_DT}/local-mac-address)
echo ""
echo "Testing eth0 to see if it has an IP Address"
ETH0_VALID=$(ifconfig eth0 | grep inet)
if [ "$ETH0_VALID" == "" ]
	then
		echo "eth0 does not have an IP Address"
		echo "Attempting to bring up usb0..."
		
		## Try to use sam MAC address as CPSW ethernet switch
		## as this is used by ROM bootloader.
		ip link set usb0 address ${MAC_ADDR}
		if [ $? -ne 0 ]
			then
				echo "Unable to set ethernet gadget HW address"
				exit 1
		fi

		# Now bring up the ethernet gadger. Link-layer condig
		# should then happen through DHCP.
		ifup usb0
		if [ $? -ne 0 ]
			then
				echo "Unable bring up ethernet gadget"
				exit 1
		fi
fi
		
## Set Server IP here. This commande depends on a default gateway
## being set in the server. In Linux isc-dhcp-server, this is
## done with the routers option in /etc/dhcp/dhcpd.conf. In Uniflash,
## this is done in the open-dhcp config file. This address is 
## usually set to the same address as the server to make it
## the default gateway.
SERVER_IP=$(route -n | grep 'UG[ \t]' | awk '{print $2}')

## If server IP is not set correctly, or can't be discovered with 
## with the above command, set it to a defined default.
if [ "${SERVER_IP}" == "" ]
	then 
		echo "Server IP not found, setting to default"		
		SERVER_IP="192.168.2.1"
fi

## Set the name of the flasher script to be fetched.
DEBRICK_SCRIPT="flasher.sh"

## TFTP Customized flasher script from server
echo "Getting ${DEBRICK_SCRIPT} from server: ${SERVER_IP}"
tftp -g -r ${DEBRICK_SCRIPT} ${SERVER_IP}

## Test to make sure that flasher could be downloaded. Exit if not.
if [ $? -ne 0 ]
	then 
		echo "Unable to fetch flasher script! Exiting..."
		exit 1
fi

## Make the flasher script executable
chmod +x ${DEBRICK_SCRIPT}

## Test to make sure that flasher could be made executable. Exit if not.
if [ $? -ne 0 ]
	then 
		echo "Unable to make flasher script executable. Exiting..."
		exit 1
fi

echo ""
echo "********************************************"
echo "Sitara Flash Fetcher is complete. Executing ${DEBRICK_SCRIPT}."
echo "********************************************"
echo ""

## Execute script. Pass SERVER_IP and MAD_ADDR flasher.sh.
echo "Calling Script=${DEBRICK_SCRIPT} with SERVER_IP=${SERVER_IP}"
echo ""
./${DEBRICK_SCRIPT} ${SERVER_IP} ${MAC_ADDR}

